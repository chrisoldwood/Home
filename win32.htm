<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">

<head>
<meta name="author"      content="Chris Oldwood" />
<meta name="keywords"    content="Chris Oldwood HomePage Freeware Win32 DDE NetDDE UT2003 UT2004 UT Cache Manager SQL HTTP TCP/IP WinSock Named Pipes" />
<meta name="description" content="Chris Oldwood's freeware Win32 stuff" />
<title>Chris Oldwood's Freeware Win32 Stuff</title>
<link href="stylesheet.css" type="text/css" rel="stylesheet" />
<script language="JavaScript" src="javascript.js" type="text/javascript"></script>
</head>

<!-- Google page counter -->
<script type="text/javascript">
var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
</script>
<script type="text/javascript">
try {
var pageTracker = _gat._getTracker("UA-9391989-2");
pageTracker._trackPageview();
} catch(err) {}</script>

<body>
<div align="center">

<!-- main table -->
<table class="main_table" align="center" id="main">
<tr><td>

<!-- header table -->
<table class="header_table" id="header">
<tr><td class="header_text">Chris Oldwood's Freeware Win32 Stuff</td></tr>
</table>

<!-- navigation table -->
<table class="navigation_table" align="center" id="navigation">
<tr>
<td>&nbsp;</td>
<td class="navigation_cell">&nbsp;<a             href="default.htm">Home</a >&nbsp;</td>
<td class="navigation_cell">&nbsp;<a class="sel" href="win32.htm"  >Win32</a>&nbsp;</td>
<td class="navigation_cell">&nbsp;<a             href="win16.htm"  >Win16</a>&nbsp;</td>
<td class="navigation_cell">&nbsp;<a             href="dos.htm"    >DOS</a  >&nbsp;</td>
<td class="navigation_cell">&nbsp;<a             href="java.htm"   >Java</a >&nbsp;</td>
<td class="navigation_cell">&nbsp;<a             href="sql.htm"    >SQL</a  >&nbsp;</td>
<td class="navigation_cell">&nbsp;<a             href="articles.htm">Articles</a >&nbsp;</td>
<td class="navigation_cell">&nbsp;<a             href="links.htm"  >Links</a>&nbsp;</td>
<td>&nbsp;</td>
</tr>
</table>

</td></tr><tr><td class="main_table_cell">

<!-- content table -->
<a name="serialport"></a>
<table class="content_table" align="center" id="content28">
<tr>
<td class="content_header">SerialPort v1.0</td>
<td class="content_date"  >09/10/2018</td>
</tr>
<tr><td class="content_body" colspan="2">
This tool is specifically designed for the Window 95 lineage to allow you to
redirect stdout to a serial port. (This feature is built into the Windows NT
shell.) It was written with serial-port-to-network adapters in mind.
<p></p>
<a href="win32/serialport/serialport-10r.zip">ZIP [75 K]</a>&nbsp;
<a href="win32/serialport/serialport.html"   >Manual</a>&nbsp;
&nbsp;|&nbsp;
<a href="win32/serialport/serialport-10s.zip">Source [498 K]</a>&nbsp;
<a href="https://github.com/chrisoldwood/SerialPort">GitHub Repo</a>&nbsp;
<a href="win32/serialport/serialport-10d.zip">Debug [143 K]</a>&nbsp;
</td></tr>
</table>

</td></tr><tr><td class="main_table_cell">

<!-- content table -->
<a name="farmmonitor"></a>
<table class="content_table" align="center" id="content27">
<tr>
<td class="content_header">Farm Monitor v0.2</td>
<td class="content_date"  >29/03/2016</td>
</tr>
<tr><td class="content_body" colspan="2">
This is a simple GUI based monitoring and admin tool for Windows servers. It
allows you to configure a set of hosts and monitor them using a number of custom
WMI based queries.
<p></p>
<a href="win32/farmmonitor/farm-monitor-02r.msi">MSI [500 K]</a>&nbsp;
<a href="win32/farmmonitor/farm-monitor-02r.zip">ZIP [275 K]</a>&nbsp;
<a href="javascript:ShowScreenShot('win32/farmmonitor/farm-monitor.gif');">Screenshot</a>&nbsp;
<a href="win32/farmmonitor/farm-monitor.html"  >Manual</a>&nbsp;
&nbsp;|&nbsp;
<a href="win32/farmmonitor/farm-monitor-02s.zip">Source [828 K]</a>&nbsp;
<a href="https://github.com/chrisoldwood/FarmMonitor">GitHub Repo</a>&nbsp;
<a href="win32/farmmonitor/farm-monitor-02d.zip">Debug [565 K]</a>&nbsp;
</td></tr>
</table>

</td></tr><tr><td class="main_table_cell">

<!-- content table -->
<a name="vdproj2wix"></a>
<table class="content_table" align="center" id="content26">
<tr>
<td class="content_header">vdproj2wix v1.0</td>
<td class="content_date"  >31/10/2011</td>
</tr>
<tr><td class="content_body" colspan="2">
This is a PowerShell script to convert a Visual Studio setup project (.vdproj)
into a WiX project (.wxs). The resulting WiX file only contains the folders and
files for deployment, it does not attempt to deal with any UI aspects.
<p></p>
<a href="win32/vdproj2wix/vdproj2wix10r.zip">Download [6 K]</a>&nbsp;
<a href="win32/vdproj2wix/vdproj2wix.html"  >Manual</a>&nbsp;
&nbsp;|&nbsp;
<a href="https://github.com/chrisoldwood/vdproj2wix">GitHub Repo</a>&nbsp;
</td></tr>
</table>

</td></tr><tr><td class="main_table_cell">

<!-- content table -->
<a name="wmicmd"></a>
<table class="content_table" align="center" id="content25">
<tr>
<td class="content_header">WMI Command v1.1</td>
<td class="content_date"  >26/06/2012</td>
</tr>
<tr><td class="content_body" colspan="2">
This command line tool allows you to run WMI select queries. It can run the
query against multiple hosts and has a switch to format WMI dates more naturally.
<p></p>
<a href="win32/wmicmd/wmicmd11r.msi">Download [299 K]</a>&nbsp;
<a href="javascript:ShowScreenShot('win32/wmicmd/wmicmd.gif');">Screenshot</a>&nbsp;
<a href="win32/wmicmd/wmicmd.html"  >Manual</a>&nbsp;
&nbsp;|&nbsp;
<a href="win32/wmicmd/wmicmd11s.zip">Source [455 K]</a>&nbsp;
<a href="https://github.com/chrisoldwood/WMICmd">GitHub Repo</a>&nbsp;
<a href="win32/wmicmd/wmicmd11d.msi">Debug  [384 K]</a>&nbsp;
</td></tr>
</table>

</td></tr><tr><td class="main_table_cell">

<!-- content table -->
<a name="xmledit"></a>
<table class="content_table" align="center" id="content24">
<tr>
<td class="content_header">XML Editor v0.5 [Alpha]</td>
<td class="content_date"  >30/09/2008</td>
</tr>
<tr><td class="content_body" colspan="2">
This is a simple editor for XML format files. It currently only contains the
viewing functionality.
<p></p>
<a href="win32/xmledit/xmledit05d.zip">Download [730 K]</a>&nbsp;
<a href="javascript:ShowScreenShot('win32/xmledit/xmledit.gif');">Screenshot</a>&nbsp;
<!--
<a href="win32/xmledit/xmledit.html"  >Manual</a>&nbsp;
-->
&nbsp;|&nbsp;
<!--
<a href="win32/xmledit/xmledit05s.zip">Source [427 K]</a>&nbsp;
-->
<a href="https://github.com/chrisoldwood/XMLEdit">GitHub Repo</a>&nbsp;
<!--
<a href="win32/xmledit/xmledit05d.zip">Debug  [504 K]</a>&nbsp;
-->
</td></tr>
</table>

</td></tr><tr><td class="main_table_cell">

<!-- content table -->
<a name="vcprojcompare"></a>
<table class="content_table" align="center" id="content22">
<tr>
<td class="content_header">Visual C++ Project Compare v1.0</td>
<td class="content_date"  >08/06/2009</td>
</tr>
<tr><td class="content_body" colspan="2">
This tool allows you to find inconsistencies between project settings in your
Visual C++ based projects. It can compare either a specific pair of projects or
many project files under a folder and can intelligently handle settings that
are marked build dependent or filter out those which are deemed project
specific.
<p></p>
<a href="win32/vcprojcmp/vcprojcmp10r.zip">Download [277 K]</a>&nbsp;
<a href="javascript:ShowScreenShot('win32/vcprojcmp/vcprojcmp.gif');">Screenshot</a>&nbsp;
<a href="win32/vcprojcmp/manual/vcprojcompare.html">Manual</a>&nbsp;
&nbsp;|&nbsp;
<a href="win32/vcprojcmp/vcprojcmp10s.zip">Source [427 K]</a>&nbsp;
<a href="https://github.com/chrisoldwood/VCProjCompare">GitHub Repo</a>&nbsp;
<a href="win32/vcprojcmp/vcprojcmp10d.zip">Debug  [504 K]</a>&nbsp;
</td></tr>
</table>

</td></tr><tr><td class="main_table_cell">

<!-- content table -->
<a name="ddecommand"></a>
<table class="content_table" align="center" id="content20">
<tr>
<td class="content_header">DDE Command v1.6</td>
<td class="content_date"  >23/04/2017</td>
</tr>
<tr><td class="content_body" colspan="2">
This is a command line (aka console) based tool for querying text data from DDE 
servers. It is the counterpart to my much older GUI based tool below - DDE
Query. It supports all the major DDE command types, such as XTYP_REQUEST,
XTYP_ADVSTART, XTYP_POKE &amp; XTYP_EXECUTE. It can also act as a DDE server
for testing DDE clients.
<p></p>
<a href="https://chocolatey.org/packages/ddecmd">Chocolatey</a>&nbsp;
<a href="win32/ddecmd/ddecmd16r.msi">MSI</a>&nbsp;
<a href="win32/ddecmd/ddecmd16r.zip">ZIP</a>&nbsp;
&nbsp;|&nbsp;
<a href="javascript:ShowScreenShot('win32/ddecmd/ddecmd.gif');">Screenshot</a>&nbsp;
<a href="win32/ddecmd/ddecmd.html"  >Manual</a>&nbsp;
<a href="win32/ddecmd/relnotes.txt"  >Release Notes</a>&nbsp;
&nbsp;|&nbsp;
<a href="win32/ddecmd/ddecmd16s.zip">Source</a>&nbsp;
<a href="https://github.com/chrisoldwood/DDECmd">GitHub</a>&nbsp;
<a href="win32/ddecmd/ddecmd16d.zip">Debug</a>&nbsp;
</td></tr>
</table>

</td></tr><tr><td class="main_table_cell">

<!-- content table -->
<a name="ddecomclient"></a>
<table class="content_table" align="center" id="content1">
<tr>
<td class="content_header">DDE COM Client v1.1</td>
<td class="content_date"  >26/07/2013</td>
</tr>
<tr><td class="content_body" colspan="2">
This COM component is an Automation Server (i.e. IDispatch based) for querying
DDE Servers. It was designed to allow scripting languages such as VBScript to
make simple DDE queries. The component provides two basic COM classes, one for
the <i>DDE Client</i> that allows querying of running servers and ad-hoc DDE
requests for text values, and the other is for a <i>DDE Conversation</i> which
avoids the overhead of creating conversations on-the-fly, if you need to request
many values. A HelpFile is included that documents the API and provides some
examples.
<p></p>
<a href="win32/ddecomclient/ddecomclient11r.zip">Download [99 K]</a>&nbsp;
<a href="win32/ddecomclient/ddecomclient.html"  >Manual</a>&nbsp;
&nbsp;|&nbsp;
<a href="win32/ddecomclient/ddecomclient11s.zip">Source [555 K]</a>&nbsp;
<a href="https://github.com/chrisoldwood/DDECOMClient">GitHub Repo</a>&nbsp;
<a href="win32/ddecomclient/ddecomclient11d.zip">Debug  [216 K]</a>&nbsp;
</td></tr>
</table>

</td></tr><tr><td class="main_table_cell">

<!-- content table -->
<a name="ddequery"></a>
<table class="content_table" align="center" id="content2">
<tr>
<td class="content_header">DDE Query v1.5</td>
<td class="content_date"  >23/04/2005</td>
</tr>
<tr><td class="content_body" colspan="2">
This is a utility for querying DDE servers. It supports all the transaction types
such as request, advise, poke and execute for both standard and custom clipboard
formats. It has an ASCII and binary viewer for looking in detail at the data sent
from the DDE server and you can set-up and monitor a bunch of hot-links from a
file.
<p></p>
<a href="win32/ddequery/ddequery15r.zip">Download [148 K]</a>&nbsp;
<a href="javascript:ShowScreenShot('win32/ddequery/ddequery.gif');">Screenshot</a>&nbsp;
&nbsp;|&nbsp;
<a href="win32/ddequery/ddequery15s.zip">Source [311 K]</a>&nbsp;
<a href="https://github.com/chrisoldwood/DDEQuery">GitHub Repo</a>&nbsp;
<a href="win32/ddequery/ddequery15d.zip">Debug  [337 K]</a>&nbsp;
</td></tr>
</table>

</td></tr><tr><td class="main_table_cell">

<!-- content table -->
<a name="utcachemgr"></a>
<table class="content_table" align="center" id="content3">
<tr>
<td class="content_header">UT Cache Manager v2.5</td>
<td class="content_date"  >31/03/2004</td>
</tr>
<tr><td class="content_body" colspan="2">
This is a utility for Unreal Tournament, UT2003, UT2004 and all their mods, such
as Tactical Ops and Frag Ops which allows you to manage the cache where files
are downloaded when you play online. It can move/copy files into your main folders
so that you can play the maps offline, copy files from another user's cache to save
downloading over slow connections, remove failed downloads and old entries from
the cache index and restore files back to the cache if a conflict occurs. It can
also install map packs and import directly into the cache from another one.
<p></p>
<a href="win32/utcachemgr/utcachemgr25r.zip">Download [259 K]</a>&nbsp;
<a href="javascript:ShowScreenShot('win32/utcachemgr/utcachemgr.gif');">Screenshot</a>&nbsp;
&nbsp;|&nbsp;
<a href="win32/utcachemgr/utcachemgr25s.zip">Source [431 K]</a>&nbsp;
<a href="https://github.com/chrisoldwood/WIN32-2">GitHub Repo</a>&nbsp;
<a href="win32/utcachemgr/utcachemgr25d.zip">Debug  [405 K]</a>&nbsp;
</td></tr>
</table>

</td></tr><tr><td class="main_table_cell">

<!-- content table -->
<a name="setup"></a>
<table class="content_table" align="center" id="content4">
<tr>
<td class="content_header">Setup v1.2</td>
<td class="content_date"  >26/03/2007</td>
</tr>
<tr><td class="content_body" colspan="2">
This is the installer that I wrote and used before the MSI installer was
ubiquitous. It is driven by a simple config (.ini) file that supplies the
default folder name, program group, list of files to be copied, shortcuts to
create etc. It also includes a GUI tool for creating the scripts but has no
support for uninstalling applications.
<p></p>
<i>This application is no longer being actively maintained.</i>
<p></p>
<a href="win32/setup/setup12r.zip">Download [207 K]</a>&nbsp;
<a href="javascript:ShowScreenShot('win32/setup/setup.gif');">Screenshot</a>&nbsp;
&nbsp;|&nbsp;
<a href="win32/setup/setup12s.zip">Source [303 K]</a>&nbsp;
<a href="https://github.com/chrisoldwood/WIN32-2">GitHub Repo</a>&nbsp;
<a href="win32/setup/setup12d.zip">Debug  [306 K]</a>&nbsp;
</td></tr>
</table>

</td></tr><tr><td class="main_table_cell">

<!-- content table -->
<a name="utsvrbrowser"></a>
<table class="content_table" align="center" id="content5">
<tr>
<td class="content_header">UT Server Browser v1.0 [Alpha]</td>
<td class="content_date"  >19/06/2003</td>
</tr>
<tr><td class="content_body" colspan="2">
This utility for Unreal Tournament (and all its mods) allows you to find and
monitor UT servers and to add/remove them from your favourites. It has a number
of filtering options (mod, players, ping, partial name etc) to help you reduce
the noise. It comes with configs for the most popular mods.
<p></p>
This is dependent on the unreal.epicgames.com master server which has been
known to go offline every now and then.
<p></p>
<i>This application is no longer being actively maintained.</i>
<p></p>
<a href="win32/utsvrbrw/utsvrbrw09r.zip">Download [103 K]</a>&nbsp;
<a href="javascript:ShowScreenShot('win32/utsvrbrw/utsvrbrw.gif');">Screenshot</a>&nbsp;
&nbsp;|&nbsp;
<a href="win32/utsvrbrw/utsvrbrw09s.zip">Source [407 K]</a>&nbsp;
<a href="https://github.com/chrisoldwood/WIN32">GitHub Repo</a>&nbsp;
<a href="win32/utsvrbrw/utsvrbrw09d.zip">Debug  [191 K]</a>&nbsp;
</td></tr>
</table>

</td></tr><tr><td class="main_table_cell">

<!-- content table -->
<a name="socktrace"></a>
<table class="content_table" align="center" id="content6">
<tr>
<td class="content_header">Socket Tracer v1.5</td>
<td class="content_date"  >07/07/2004</td>
</tr>
<tr><td class="content_body" colspan="2">
This is a kind of TCP/UDP proxy that allows you to capture the traffic sent
and received by a client and server. You point the client to the tool and direct
the tool to forward to the server and it writes any data sent between the two
to a file. I wrote it to sniff the traffic between Unreal Tournament and the
HTTP, master and game servers used in on-line play.
<p></p>
<a href="win32/socktrace/socktrace15r.zip">Download [130 K]</a>&nbsp;
&nbsp;|&nbsp;
<a href="win32/socktrace/socktrace15s.zip">Source [305 K]</a>&nbsp;
<a href="https://github.com/chrisoldwood/SockTrace">GitHub Repo</a>&nbsp;
<a href="win32/socktrace/socktrace15d.zip">Debug  [268 K]</a>&nbsp;
</td></tr>
</table>

</td></tr><tr><td class="main_table_cell">

<!-- content table -->
<a name="httpquery"></a>
<table class="content_table" align="center" id="content7">
<tr>
<td class="content_header">HTTP Query Tool v1.1</td>
<td class="content_date"  >19/06/2003</td>
</tr>
<tr><td class="content_body" colspan="2">
This is a simple tool for formatting and executing HTTP queries against a web server.
It allows you to specify and view the request and response headers, much as you can
with 'telnet', but does it a little friendlier. I wrote it as a diagnostic tool to
sort out issues with proxies and firewalls.
<p></p>
<a href="win32/httpquery/httpquery11r.zip">Download [58 K]</a>&nbsp;
<a href="javascript:ShowScreenShot('win32/httpquery/httpquery.gif');">Screenshot</a>&nbsp;
&nbsp;|&nbsp;
<a href="win32/httpquery/httpquery11s.zip">Source [292 K]</a>&nbsp;
<a href="https://github.com/chrisoldwood/HttpQuery">GitHub Repo</a>&nbsp;
<a href="win32/httpquery/httpquery11d.zip">Debug  [129 K]</a>&nbsp;
</td></tr>
</table>

</td></tr><tr><td class="main_table_cell">

<!-- content table -->
<a name="netdde"></a>
<table class="content_table" align="center" id="content8">
<tr>
<td class="content_header">DDE Network Bridge v2.0</td>
<td class="content_date"  >21/11/2004</td>
</tr>
<tr><td class="content_body" colspan="2">
This is a client/server application that allows you to access DDE sources
across a network, just like the built-in NetDDE service, but this one has
some clever options and caching to reduce round-trip delays. Also, it is
transparent to the DDE client, so no changes to the DDE links are required.
<p></p>
<a href="win32/netdde/netdde20r.zip">Download [239 K]</a>&nbsp;
&nbsp;|&nbsp;
<a href="win32/netdde/netdde20s.zip">Source [375 K]</a>&nbsp;
<a href="https://github.com/chrisoldwood/NetDDE">GitHub Repo</a>&nbsp;
<a href="win32/netdde/netdde20d.zip">Debug  [511 K]</a>&nbsp;
</td></tr>
</table>

</td></tr><tr><td class="main_table_cell">

<!-- content table -->
<a name="chkclocks"></a>
<table class="content_table" align="center" id="content9">
<tr>
<td class="content_header">Network Clock Checker v1.2</td>
<td class="content_date"  >21/11/2004</td>
</tr>
<tr><td class="content_body" colspan="2">
This is a utility to scan a network and compare the system clock times for all
computers to the one on which the utility is being run.
<p></p>
This utility can only be run on a Windows NT/2K/XP/Vista machine and has only
been tested in a Windows NT/2K environment.
<p></p>
<a href="win32/chkclocks/chkclocks12r.zip">Download [150 K]</a>&nbsp;
<a href="javascript:ShowScreenShot('win32/chkclocks/chkclocks.gif');">Screenshot</a>&nbsp;
&nbsp;|&nbsp;
<a href="win32/chkclocks/chkclocks12s.zip">Source [327 K]</a>&nbsp;
<a href="https://github.com/chrisoldwood/WIN32-2">GitHub Repo</a>&nbsp;
<a href="win32/chkclocks/chkclocks12d.zip">Debug  [331 K]</a>&nbsp;
</td></tr>
</table>

</td></tr><tr><td class="main_table_cell">

<!-- content table -->
<a name="tasktracker"></a>
<table class="content_table" align="center" id="content10">
<tr>
<td class="content_header">Task Tracker v4.0</td>
<td class="content_date"  >26/03/2007</td>
</tr>
<tr><td class="content_body" colspan="2">
This is a simple tool for keeping track of the hours you spend at work on various
projects. You clock in and out during the day and associate a short phrase with
each block of work. At any time you can run a report which shows your hours grouped
by week, month or task and it sums them up based on the grouping. The report can
be viewed, printed or saved to a file or the clipboard. I wrote it whilst contracting.
<p></p>
<a href="win32/tasktrak/tasktrak40r.zip">Download [341 K]</a>&nbsp;
<a href="javascript:ShowScreenShot('win32/tasktrak/tasktrak.gif');">Screenshot</a>&nbsp;
<a href="win32/tasktrak/manual/tasktracker.html">Manual</a>&nbsp;
&nbsp;|&nbsp;
<a href="win32/tasktrak/tasktrak40s.zip">Source [448 K]</a>&nbsp;
<a href="https://github.com/chrisoldwood/TaskTracker">GitHub Repo</a>&nbsp;
<a href="win32/tasktrak/tasktrak40d.zip">Debug  [453 K]</a>&nbsp;
</td></tr>
</table>

</td></tr><tr><td class="main_table_cell">

<!-- content table -->
<a name="pqt"></a>
<table class="content_table" align="center" id="content11">
<tr>
<td class="content_header">Parametrized DB Query Tool v1.5</td>
<td class="content_date"  >06/10/2010</td>
</tr>
<tr><td class="content_body" colspan="2">
This support tool is designed to provide an alternative way to run parametrized queries
without having to resort to writing stored procedures. You write your basic
query and when it is correct you replace the hard-coded values with variable
names, e.g. $Name$. Next time when you run the query it will prompt you for
the variables values in a dialog and substitute them in the query. It also allows
you to configure logical connections and associate script paths with them to make
it quicker to find and run common scripts for a database.
<p></p>
<!--
<a href="win32/pqt/pqt11r.zip">Download [94 K]</a>&nbsp;
--> Download []
<a href="javascript:ShowScreenShot('win32/pqt/pqt.gif');">Screenshot</a>&nbsp;
&nbsp;|&nbsp;
<!--
<a href="win32/pqt/pqt11s.zip">Source [333 K]</a>&nbsp;
--> Source []
<a href="https://github.com/chrisoldwood/PQT">GitHub Repo</a>&nbsp;
<a href="win32/pqt/pqt15d.zip">Debug  [519 K]</a>&nbsp;
</td></tr>
</table>

</td></tr><tr><td class="main_table_cell">

<!-- content table -->
<a name="fcmanager"></a>
<table class="content_table" align="center" id="content12">
<tr>
<td class="content_header">Football Club Manager v0.3 [Alpha]</td>
<td class="content_date"  >18/09/2001</td>
</tr>
<tr><td class="content_body" colspan="2">
This is an application for Football Club Secretaries to help them manage their
sides. It helps you keep track of club members, fixtures and monetary details
such as accounts and player debts. You can also use it to hold the details of
other club secretaries and referees in the league.
<p></p>
<i>This application is no longer being actively maintained.</i>
<p></p>
<a href="win32/fcmanager/fcmanager03r.zip">Download [134 K]</a>&nbsp;
<a href="javascript:ShowScreenShot('win32/fcmanager/fcmanager.gif');">Screenshot</a>&nbsp;
&nbsp;|&nbsp;
<a href="win32/fcmanager/fcmanager03s.zip">Source [440 K]</a>&nbsp;
<a href="https://github.com/chrisoldwood/WIN32">GitHub Repo</a>&nbsp;
<a href="win32/fcmanager/fcmanager03d.zip">Debug  [228 K]</a>&nbsp;
</td></tr>
</table>

</td></tr><tr><td class="main_table_cell">

<!-- content table -->
<a name="classgen"></a>
<table class="content_table" align="center" id="content13">
<tr>
<td class="content_header">Class Generator v2.0</td>
<td class="content_date"  >08/06/2009</td>
</tr>
<tr><td class="content_body" colspan="2">
This is the class generator I use when adding new classes to my projects.
It supports only a limited set of parameter tags and includes templates for
various generic classes, dialogs, property sheets and property pages. It is
included here only for completeness.
<p></p>
<a href="win32/classgen/classgen20r.zip">Download [200 K]</a>&nbsp;
<a href="javascript:ShowScreenShot('win32/classgen/classgen.gif');">Screenshot</a>&nbsp;
<a href="win32/classgen/manual/classgen.html">Manual</a>&nbsp;
&nbsp;|&nbsp;
<a href="win32/classgen/classgen20s.zip">Source [365 K]</a>&nbsp;
<a href="https://github.com/chrisoldwood/ClassGen">GitHub Repo</a>&nbsp;
<a href="win32/classgen/classgen20d.zip">Debug  [403 K]</a>&nbsp;
</td></tr>
</table>

</td></tr><tr><td class="main_table_cell">

<!-- content table -->
<a name="mdadbg"></a>
<table class="content_table" align="center" id="content14">
<tr>
<td class="content_header">MDA Debug Monitor</td>
<td class="content_date"  >15/02/1996</td>
</tr>
<tr><td class="content_body" colspan="2">
A debugging tool that dumps all the Trace output from the OS and from calls
to OutputDebugString() onto the secondary monochrome display. It was written
because there was no Win32 version of DBWIN. It accesses the MDA through a
Win16 .DLL, which in turn is accessed by a Win32 thunking .DLL. This requires
the Thunk compiler from the DDK.
<p></p>
<i>This application is no longer being actively maintained.</i>
<p></p>
<a href="win32/mdadbg/mdadbg10s.zip">Source [60 K]</a>&nbsp;
<a href="https://github.com/chrisoldwood/WIN32">GitHub Repo</a>&nbsp;
</td></tr>
</table>

</td></tr><tr><td class="main_table_cell">

<!-- content table -->
<a name="wcl"></a>
<table class="content_table" align="center" id="content15">
<tr>
<td class="content_header">Windows C++ Library</td>
<td class="content_date"  >28/06/2012</td>
</tr>
<tr><td class="content_body" colspan="2">
This is the core library that all my applications rely on to provide the basic
C++ classes to wrap the WIN32 API. It is my equivalent of the MFC library.
The library provides a basic set of application classes for dialog and SDI based
apps - wrappers for most of the common controls and GDI objects - a basic set of
container classes and some I/O classes. It is not a complete class library, it
grows when requirements from my applications forces it to, which isn't much these
days. Also because of its heritage there is virtually no use of the STL or Boost.
<p></p>
This library depends on:
<a href="#core">Core</a>&nbsp;
<p></p>
<a href="win32/libs/wcl.zip">Source [306 K]</a>&nbsp;
<a href="https://github.com/chrisoldwood/WCL">GitHub Repo</a>&nbsp;
<a href="win32/dox/wcl/index.html">Documentation</a>&nbsp;
</td></tr>
</table>

</td></tr><tr><td class="main_table_cell">

<!-- content table -->
<a name="core"></a>
<table class="content_table" align="center" id="content16">
<tr>
<td class="content_header">Core Class Library</td>
<td class="content_date"  >28/06/2012</td>
</tr>
<tr><td class="content_body" colspan="2">
The Windows C++ Library has historically provided the basic framework for all my
Windows applications because they are naturally platform specific. This class
library takes the platform agnostic aspects out of WCL (as much as possible) so
that I can write more platform independent code were possible. Initially it only
contains some smart pointers and utility classes, and the common functions and
macros used to aid debugging.
<p></p>
<a href="win32/libs/core.zip">Source [78 K]</a>&nbsp;
<a href="https://github.com/chrisoldwood/Core">GitHub Repo</a>&nbsp;
<a href="win32/dox/core/index.html">Documentation</a>&nbsp;
</td></tr>
</table>

</td></tr><tr><td class="main_table_cell">

<!-- content table -->
<a name="mdbl"></a>
<table class="content_table" align="center" id="content17">
<tr>
<td class="content_header">Memory Database Library</td>
<td class="content_date"  >28/06/2012</td>
</tr>
<tr><td class="content_body" colspan="2">
This library provides classes to create an in-memory copy of a database. The data
and table schema can be provided programmatically or derived from a query result
set run on an actual database. Currently ODBC is the only DB library supported with
ADO on the list. The database can also be serialized into a binary file. The library
supports many data types and natural database features such as indexing, primary
keys, foreign keys and triggers. It was designed with performance more in mind than
features because I use it mostly for caching data.
<p></p>
This library depends on:
<a href="#core">Core</a>&nbsp;
<a href="#wcl">WCL</a>&nbsp;
<p></p>
<i>The only aspect of this library being actively maintained is the ODBC facade.</i>
<p></p>
<a href="win32/libs/mdbl.zip">Source [77 K]</a>&nbsp;
<a href="https://github.com/chrisoldwood/MDBL">GitHub Repo</a>&nbsp;
<a href="win32/dox/mdbl/index.html">Documentation</a>&nbsp;
</td></tr>
</table>

</td></tr><tr><td class="main_table_cell">

<!-- content table -->
<a name="ncl"></a>
<table class="content_table" align="center" id="content18">
<tr>
<td class="content_header">Network &amp; Comms Library</td>
<td class="content_date"  >28/06/2012</td>
</tr>
<tr><td class="content_body" colspan="2">
This is a library of classes for networking, communications and IPC. It currently
contains classes for using Named Pipes, DDE &amp; Sockets.
<p></p>
This library depends on:
<a href="#core">Core</a>&nbsp;
<a href="#wcl">WCL</a>&nbsp;
<p></p>
<a href="win32/libs/ncl.zip">Source [70 K]</a>&nbsp;
<a href="https://github.com/chrisoldwood/NCL">GitHub Repo</a>&nbsp;
<a href="win32/dox/ncl/index.html">Documentation</a>&nbsp;
</td></tr>
</table>

</td></tr><tr><td class="main_table_cell">

<!-- content table -->
<a name="com"></a>
<table class="content_table" align="center" id="content19">
<tr>
<td class="content_header">COM Class Library</td>
<td class="content_date"  >28/06/2012</td>
</tr>
<tr><td class="content_body" colspan="2">
This class library contains classes for writing COM servers. At the moment it
contains support for Inproc Servers only but covers both custom, IDispatch &amp;
Dual style interfaces. It also provides IErrorInfo support by default.
<p></p>
This library depends on:
<a href="#core">Core</a>&nbsp;
<a href="#wcl">WCL</a>&nbsp;
<p></p>
<a href="win32/libs/com.zip">Source [32 K]</a>&nbsp;
<a href="https://github.com/chrisoldwood/COM">GitHub Repo</a>&nbsp;
<a href="win32/dox/com/index.html">Documentation</a>&nbsp;
</td></tr>
</table>

</td></tr><tr><td class="main_table_cell">

<!-- content table -->
<a name="xml"></a>
<table class="content_table" align="center" id="content21">
<tr>
<td class="content_header">XML Class Library</td>
<td class="content_date"  >28/06/2012</td>
</tr>
<tr><td class="content_body" colspan="2">
This is a class library for reading and writing XML format files. It also
provides a very simple XPath evaluator.
<p></p>
This library depends on:
<a href="#core">Core</a>&nbsp;
<p></p>
<a href="win32/libs/xml.zip">Source [43 K]</a>&nbsp;
<a href="https://github.com/chrisoldwood/XML">GitHub Repo</a>&nbsp;
<a href="win32/dox/xml/index.html">Documentation</a>&nbsp;
</td></tr>
</table>

</td></tr><tr><td class="main_table_cell">

<!-- content table -->
<a name="wmi"></a>
<table class="content_table" align="center" id="content27">
<tr>
<td class="content_header">WMI Class Library</td>
<td class="content_date"  >28/06/2012</td>
</tr>
<tr><td class="content_body" colspan="2">
This class library provides a C++ facade over the COM based WMI API. In particular
it is intended to provide type-safe access to the CIM classes rather than dealing
with VARIANTs everywhere.
<p></p>
This library depends on:
<a href="#core">Core</a>&nbsp;
<a href="#wcl">WCL</a>&nbsp;
<p></p>
<a href="win32/libs/wmi.zip">Source [26 K]</a>&nbsp;
<a href="https://github.com/chrisoldwood/WMI">GitHub Repo</a>&nbsp;
<a href="win32/dox/wmi/index.html">Documentation</a>&nbsp;
</td></tr>
</table>

</td></tr><tr><td class="main_table_cell">

<!-- content table -->
<a name="scripts"></a>
<table class="content_table" align="center" id="content23">
<tr>
<td class="content_header">Build Scripts</td>
<td class="content_date"  >12/10/2017</td>
</tr>
<tr><td class="content_body" colspan="2">
These are the .cmd scripts that I use when building via the command line, or
when using STLport. It also contains other scripts to help with packaging an
MSI, ZIP or Chocolatey package.
<p></p>
<a href="win32/scripts/scripts.zip">Scripts [15 K]</a>
<a href="https://github.com/chrisoldwood/Scripts">GitHub Repo</a>&nbsp;
</td></tr>
</table>

<!-- footer row -->
<tr><td class="footer_centre">
Page Last Updated: 09/10/2018
</td></tr>

<!-- main table -->
</td></tr>
</table>

</div>
</body>

</html>
